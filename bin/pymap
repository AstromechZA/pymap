#!/usr/bin/env python

import argparse
import logging

from pymap import create_map, add_grid

log = logging.getLogger(__name__)

def main():
    parser = argparse.ArgumentParser(description='Generates a png map of the given geographic area.')
    parser.add_argument('latitude', type=float, help="The vertical or north-south coordinate of the image center.")
    parser.add_argument('longitude', type=float, help="The horizantal or east-west coordinate of the  image center.")
    parser.add_argument('output_path', help="The output path of the image as a jpg or png.")
    parser.add_argument('--zoom', default=10, type=int, help="The zoom level of the image (0-16).")
    parser.add_argument('--width', default=512, type=int, help="The width and horizantal span of the map image in pixels.")
    parser.add_argument('--height', default=512, type=int, help="The height and vertical span of the map image in pixels.")
    parser.add_argument('--grid', type=int, help="Draw a grid with the given size over the image.")
    parser.add_argument('--debug', action='store_true', help="Print debugging text.")

    args = parser.parse_args()

    errors = False
    if args.latitude > 90 or args.latitude < -90:
        print 'error: latitude must be in -90 -> 90'
        errors = True

    if args.longitude > 180 or args.longitude < -180:
        print 'error: longitude must be in -180 -> 180'
        errors = True

    if args.zoom < 0 or args.zoom > 16:
        print 'error: zoom must be in 0 -> 16'
        errors = True

    if args.width < 100 or args.width > 10240:
        print 'error: width must be in 100 -> 10240'
        errors = True

    if args.height < 100 or args.height > 10240:
        print 'error: height must be in 100 -> 10240'
        errors = True

    if len(args.output_path) < 5 or args.output_path[-3:].lower() not in ['jpg', 'png']:
        print 'error: output_path does not have an accepted file extension'
        errors = True

    if errors:
        parser.print_usage()

    if args.debug:
        logging.basicConfig(format="%(name)s : %(levelname)s : %(message)s", level=logging.DEBUG)

    log.debug(args)

    map_image = create_map(args.latitude, args.longitude, args.zoom, args.width, args.height)

    if args.grid is not None and args.grid > 1:
        add_grid(map_image, args.grid)

    map_image.format = args.output_path[-3:].lower()
    map_image.save(filename=args.output_path.strip())
    map_image.destroy()

if __name__ == '__main__':
    main()
